#ifndef _CONFIG_H_
#define _CONFIG_H_

#define FIRMWARE_VER F("\n\nGyverMatrix-WiFi v.1.15.2020.0729")

// ******************************** ДЛЯ РАЗРАБОТЧИКОВ ********************************

#ifdef ESP8266
# define FASTLED_ALLOW_INTERRUPTS 0
#endif
#define DEBUG 0

// ************************ МАТРИЦА *************************

#define BRIGHTNESS 32         // стандартная маскимальная яркость (0-255)
uint16_t CURRENT_LIMIT=0;  // лимит по току в миллиамперах, автоматически управляет яркостью (пожалей свой блок питания!) 0 - выключить лимит

#define DEVICE_TYPE 1         // Использование матрицы: 0 - свернута в трубу для лампы; 1 - плоская матрица в рамке   

// ******************* ПОДКЛЮЧЕНИЕ К СЕТИ *******************
                                             // Внимание!!! Если вы меняете эти значения ПОСЛЕ того, как прошивка уже хотя бы раз была загружена в плату и выполнялась,
                                             // чтобы изменения вступили в силу нужно также изменить значение константы EEPROM_OK в первой строке в файле eeprom.ino 
                                             // 
#define NETWORK_SSID "Spider"                // Имя WiFi сети - пропишите здесь или задайте из программы на смартфоне
#define NETWORK_PASS "spider_password_123"   // Пароль для подключения к WiFi сети - пропишите здесь или задайте из программы на смартфоне
#define DEFAULT_AP_NAME "MatrixAP"           // Имя точки доступа по умолчанию 
#define DEFAULT_AP_PASS "12341234"           // Пароль точки доступа по умолчанию
#define udp_port 2390                        // Порт матрицы для подключения из программы на смартфоне
byte IP_STA[] = {0, 0, 0, 0};         // Статический адрес матрицы в локальной сети WiFi

#define DEFAULT_NTP_SERVER "ru.pool.ntp.org" // NTP сервер по умолчанию "time.nist.gov"

#define COLOR_ORDER GRB       // порядок цветов на ленте. Если цвет отображается некорректно - меняйте. Начать можно с RGB

// ****************** ПИНЫ ПОДКЛЮЧЕНИЯ *******************

// Внимание!!! При использовании платы микроконтроллера Wemos D1 (xxxx) и выбранной в менеджере плат платы "Wemos D1 (xxxx)"
// прошивка скорее всего нормально работать не будет. 
// Наблюдались следующие сбои у разных пользователей:
// - нестабильная работа WiFi (постоянные отваливания и пропадание сети) - попробуйте варианты с разным значением параметров компиляции IwIP в Arduino IDE
// - прекращение вывода контрольной информации в Serial.print() - в монитор порта не выводится
// - настройки в EEPROM не сохраняются
// Думаю все эти проблемы из за некорректной работы ядра ESP8266 для платы (варианта компиляции) Wemos D1 (xxxx) в версии ядра ESP8266 2.5.2
// Диод на ногу питания Wemos как нарисовано в схеме от Alex Gyver не ставить (!!!), конденсатор по питанию - для NodeMCU - желателен, для Wemos - обязателен (!!!)

// пины подписаны согласно pinout платы, а не надписям на пинах!
// esp8266 - плату выбирал "Node MCU v3 (SP-12E Module)"

/*
 * NodeMCU v1.0 (ESP-12E)
 * Физическое подключение:
 * Матрица зигзаг, левый нижний угол, направление вапрво
 * Пин ленты    - D2
 * Пин кнопки   - D6
 * Фоторезистор - A0
 * MP3Player    - D3 к RX, D4 к TX плеера 
 * В менеджере плат выбрано NodeMCU v1.0 (ESP-12E)
 */ 
#if defined(ESP8266)
#define WIDTH 19              // ширина матрицы
#define HEIGHT 18             // высота матрицы
#define SEGMENTS 1            // диодов в одном "пикселе" (для создания матрицы из кусков ленты)
#define MATRIX_TYPE 0         // тип матрицы: 0 - зигзаг, 1 - параллельная
#define CONNECTION_ANGLE 3    // угол подключения: 0 - левый нижний, 1 - левый верхний, 2 - правый верхний, 3 - правый нижний
#define STRIP_DIRECTION 1     // направление ленты из угла: 0 - вправо, 1 - вверх, 2 - влево, 3 - вниз
#define USE_MP3 0             // поставьте 0, если у вас нет звуковой карты MP3 плеера
#define USE_PHOTO 0           // поставьте 0, если вы не используете фоторезистор как датчик освещенности

#if USE_PHOTO!=0
#  define PHOTO_PIN 0           // пин фоторезистора
#endif
#define LED_PIN 2             // физический D2 пин ленты
#define PIN_BTN 0             // физический D6 кнопка подключена сюда (PIN --- КНОПКА --- GND)
#if USE_MP3!=0
#  define SRX D4                // физический D4 is RX of ESP8266, connect to TX of DFPlayer
#  define STX D3                // физический D3 is TX of ESP8266, connect to RX of DFPlayer module
#endif
#endif
/*
 * Wemos D1 mini
 * Физическое подключение:
 * Матрица зигзаг, правый нижний угол, направление вверх
 * Пин ленты    - D3
 * Пин кнопки   - D2
 * Фоторезистор - A0
 * MP3Player    - не подключен
 * В менеджере плат выбрано NodeMCU v1.0 (ESP-12E)
 */ 
/* 
#if defined(ESP8266)
#define WIDTH 16              // ширина матрицы
#define HEIGHT 16             // высота матрицы
#define SEGMENTS 1            // диодов в одном "пикселе" (для создания матрицы из кусков ленты)
#define MATRIX_TYPE 0         // тип матрицы: 0 - зигзаг, 1 - параллельная
#define CONNECTION_ANGLE 3    // угол подключения: 0 - левый нижний, 1 - левый верхний, 2 - правый верхний, 3 - правый нижний
#define STRIP_DIRECTION 1     // направление ленты из угла: 0 - вправо, 1 - вверх, 2 - влево, 3 - вниз
#define USE_MP3 0             // поставьте 0, если у вас нет звуковой карты MP3 плеера
#define USE_PHOTO 1           // поставьте 0, если вы не используете фоторезистор как датчик освещенности

#define PHOTO_PIN 0           // пин фоторезистора
#define LED_PIN 3             // пин ленты
#define PIN_BTN 4             // кнопка подключена сюда (PIN --- КНОПКА --- GND)
#define SRX D4                // не используется, но требуется для компиляции скетча
#define STX D3                // не используется, но требуется для компиляции скетча
#endif
*/

/*
 * NodeMCU ESP32
 * Физическое подключение:
 * Матрица зигзаг, левый нижний угол, направление вапрво
 * Пин ленты    - 2
 * Пин кнопки   - 4
 * MP3Player    - 17 к RX, 16 к TX плеера 
 * TM1637       - 23 к DIO, 22 к CLK
 * В менеджере плат выбрано "ESP32 Dev Module"
 */ 
#if defined(ESP32)
#define WIDTH 16              // ширина матрицы
#define HEIGHT 16             // высота матрицы
#define SEGMENTS 1            // диодов в одном "пикселе" (для создания матрицы из кусков ленты)
#define MATRIX_TYPE 0         // тип матрицы: 0 - зигзаг, 1 - параллельная
#define CONNECTION_ANGLE 0    // угол подключения: 0 - левый нижний, 1 - левый верхний, 2 - правый верхний, 3 - правый нижний
#define STRIP_DIRECTION 0     // направление ленты из угла: 0 - вправо, 1 - вверх, 2 - влево, 3 - вниз
#define USE_MP3 1             // поставьте 0, если у вас нет звуковой карты MP3 плеера

#define LED_PIN (2U)          // пин ленты, физически подключена к пину D2 на плате
#define PIN_BTN (4U)          // кнопка подключена сюда (PIN --- КНОПКА --- GND)
#define SRX (16U)             // 16 is RX of ESP32, connect to TX of DFPlayer
#define STX (17U)             // 17 is TX of ESP32, connect to RX of DFPlayer module
#endif

// ******************** ЭФФЕКТЫ И РЕЖИМЫ ********************

// Список и порядок эффектов и игр, передаваймый в приложение на смартфоне. Данные списки попадают в комбобокс выбора,
// чей индекс передается из приложения в контроллер матрицы для выбора, поэтому порядок должен соответствовать
// спискам эффектов и игр, определенному ниже в DEMO_XXXXXX
#define EFFECT_LIST F("Снегопад,Шарик,Радуга,Пейнтбол,Огонь,The Matrix,Шарики,Часы,Звездопад,Конфетти,Радуга диагональная,Цветной шум,Облака,Лава,Плазма,Радужные переливы,Полосатые переливы,Зебра,Шумящий лес,Морской прибой,Светлячки,Водоворот,Лампа,Рассвет,Анимация") /* 1,Анимация 2,Анимация 3,Анимация 4,Анимация 5*/
#define ALARM_LIST  F("Снегопад,Шарик,Радуга,Пейнтбол,Огонь,The Matrix,Шарики,Звездопад,Конфетти,Радуга диагональная,Цветной шум,Облака,Лава,Плазма,Радужные переливы,Полосатые переливы,Зебра,Шумящий лес,Морской прибой,Светлячки,Водоворот,Рассвет,Анимация") /* 1,Анимация 2,Анимация 3,Анимация 4,Анимация 5*/
#define GAME_LIST   F("Змейка,Тетрис,Лабиринт,Runner,Арканоид")

#if (USE_MP3 == 1)
// SD карточка в MP3 плеере (DFPlayer) содержить в корне две папки - "1" и "2"
// Папка "1" содержит MP3 файлы звуков, проигрываемых при наступлении события будильника
// Папка "2" содержит MP3 файлы звуков, проигрываемых при наступлении события рассвета
// DFPlayer не имеет возможности считывать имена файлов, только возможность получить количество файлов в папке.
// Команда на воспроизведение звука означает - играть файл с индексом (номером) N из папки M
// Номера файлов определяются таблицей размещения файлов SD-карты (FAT)  и формируются в порядке очереди записи файлов на чистую флэшку
// Так, файл записанный в папку первым получает номер 1, вторыи - 2 и так далее и ника не зависит от имен файлов
// Данные массивы содержат отображаемые в приложении имена звуков в порядке, соответствующем нумерации записанных в папки файлов.
#define ALARM_SOUND_LIST F("One Step Over,In the Death Car")            // Список звука для комбобокса "Звук будильника" в приложении на смартфоне
#define DAWN_SOUND_LIST F("Птицы,Гроза,Прибой,Дождь,Ручей,Мантра")      // Список звука для комбобокса "Звук рассвета" в приложении на смартфоне
#endif

#define D_TEXT_SPEED 100      // скорость бегущего текста по умолчанию (мс)
#define D_TEXT_SPEED_MIN 10
#define D_TEXT_SPEED_MAX 255

#define D_EFFECT_SPEED 80     // скорость эффектов по умолчанию (мс)
#define D_EFFECT_SPEED_MIN 0
#define D_EFFECT_SPEED_MAX 255

#define D_GAME_SPEED 250      // скорость игр по умолчанию (мс)
#define D_GAME_SPEED_MIN 25
#define D_GAME_SPEED_MAX 375

#define D_GIF_SPEED 100       // скорость гифок (мс)
#define DEMO_GAME_SPEED 60    // скорость игр в демо режиме (мс)

boolean AUTOPLAY = 1;         // 0 выкл / 1 вкл автоматическую смену режимов (откл. можно со смартфона)
#define AUTOPLAY_PERIOD 30    // время между авто сменой режимов (секунды)
#define IDLE_TIME 10          // время бездействия кнопок или Bluetooth (в минутах) после которого запускается автосмена режимов и демо в играх

// о поддерживаемых цветах читай тут https://alexgyver.ru/gyvermatrixos-guide/
#define GLOBAL_COLOR_1 CRGB::Green    // основной цвет №1 для игр
#define GLOBAL_COLOR_2 CRGB::Orange   // основной цвет №2 для игр

#define SCORE_SIZE 0          // размер символов счёта в игре. 0 - маленький для 8х8 (шрифт 3х5), 1 - большой (шрифт 5х7)
#define FONT_TYPE 1           // (0 / 1) два вида маленького шрифта в выводе игрового счёта
#define SMOOTH_CHANGE 0     // плавная смена режимов через чёрный

// ************** ОТКЛЮЧЕНИЕ КОМПОНЕНТОВ СИСТЕМЫ (для экономии памяти) *************

// внимание! отключение модуля НЕ УБИРАЕТ его эффекты из списка воспроизведения!
// Это нужно сделать вручную во вкладке custom, удалив ненужные функции

#define USE_NOISE_EFFECTS 1 // крутые полноэкранные эффекты (0 нет, 1 да) СИЛЬНО ЖРУТ ПАМЯТЬ!!!
#define OVERLAY_CLOCK 1     // часы на фоне всех эффектов и игр. Жрёт SRAM память!

// включение / отключение игр
#define USE_SNAKE 1         // игра змейка (0 нет, 1 да)
#define USE_TETRIS 1        // игра тетрис (0 нет, 1 да)
#define USE_MAZE 1          // игра лабиринт (0 нет, 1 да)
#define USE_RUNNER 1        // игра бегалка-прыгалка (0 нет, 1 да)
#define USE_ARKAN 1         // игра арканоид

#endif
